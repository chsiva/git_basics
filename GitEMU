# GitHub Actions: 
     CI/CD where you can build, test and deploy on specified Runners
     Automates workflows triggered by GitHub events (push, PR, schedule, etc.).
     Uses YAML files to define jobs and steps in workflows.

Workflows : A workflow is a configurable automated process that will run one or more jobs.
Jobs: A set of steps run sequentially on the same runner
Steps: Individual task within a job (e.g., run a script, checkout code).

# How do you trigger a GitHub Actions workflow?
  On GitHub events like push, pull_request, schedule, release, etc.
  Can specify filters like branches, tags, or paths.


| Feature                       | **GitHub Actions**                            | **GitLab CI/CD**                                                    |
| ----------------------------- | --------------------------------------------- | ------------------------------------------------------------------- |
| **Platform**                  | Part of GitHub                                | Part of GitLab                                                      |
| **CI/CD Integration**         | Built-in automation with `.github/workflows/` | Built-in with `.gitlab-ci.yml`                                      |
| **Pipeline Model**            | Workflow ‚Üí Job(s) ‚Üí Step(s)                   | Pipeline ‚Üí Stage(s) ‚Üí Job(s)                                        |
| **Triggers**                  | Events (push, PR, schedule, etc.)             | Events (push, merge request, schedule, etc.)                        |
| **Runner Types**              | GitHub-hosted & self-hosted runners           | GitLab-hosted & self-hosted runners                                 |
| **Ease of Use**               | Simple YAML syntax; marketplace actions       | Mature syntax; integrated with GitLab UI                            |
| **Marketplace**               | ‚úÖ 25,000+ reusable Actions available          | ‚ùå No centralized marketplace (reusable jobs via includes/templates) |
| **Container/Service Support** | Docker support built-in                       | Excellent Docker and Kubernetes support                             |
| **Caching & Artifacts**       | Supported (manual configuration)              | More mature & easier caching/artifact features                      |
| **Monorepo Support**          | Decent (manual workflows)                     | Strong monorepo support (rules, includes)                           |
| **Security Features**         | OIDC, Secrets, Approvals                      | OIDC, Secrets, Protected Envs, Runner isolation                     |
| **Open Source**               | Mostly closed source                          | GitLab CE (Community Edition) is open source                        |
| **Self-hosting**              | Partial (runners only)                        | Full self-hosted GitLab instance possible                           |


my-repo/
‚îî‚îÄ‚îÄ .github/
    ‚îî‚îÄ‚îÄ workflows/
        ‚îú‚îÄ‚îÄ test.yml
        ‚îú‚îÄ‚îÄ deploy.yml
        ‚îî‚îÄ‚îÄ lint.yml

| Limit Type                  | Maximum Allowed             |
| --------------------------- | --------------------------- |
| **Total jobs per workflow** | **256 jobs**                |
| **Total steps per job**     | 2,000 steps                 |
| **Max run time per job**    | 6 hours (depending on plan) |
| **Artifacts per workflow**  | 100 artifacts               |
| **Matrix job combinations** | 256 (max matrix expansion)  |
| **Concurrent jobs**         | Varies by plan (see below)  |


| Concept       | What It Is                                                                                              | Example                                                                        |
| ------------- | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------ |
| **`jobs`**    | Top-level units of work that run independently or in sequence. Each job runs in a separate environment. | `yaml<br>jobs:<br>  build:<br>    runs-on: ubuntu-latest<br>`                  |
| **`steps`**   | Instructions within a job that run **in order**. Can be shell commands or actions.                      | `yaml<br>steps:<br>  - run: echo "Hello"<br>  - uses: actions/checkout@v4<br>` |
| **`runs-on`** | Specifies the **runner environment** (e.g., Ubuntu, Windows, macOS) for a job.                          | `yaml<br>runs-on: ubuntu-latest<br>`                                           |
| **`uses`**    | Invokes a prebuilt **action** from GitHub Marketplace or a local/custom action.                         | `yaml<br>- uses: actions/checkout@v4<br>`                                      |
| **`env`**     | Sets **environment variables** for jobs or steps. Can be reused in commands.                            | `yaml<br>env:<br>  NODE_ENV: production<br>`                                   |
| **`secrets`** | Secure values (e.g., API keys, tokens) stored in repo or org settings. Accessed using `secrets.*`.      | `yaml<br>env:<br>  API_KEY: ${{ secrets.MY_API_KEY }}<br>`                     |



name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test


| Trigger             | Description                                         | Manual / Auto | Common Use Cases                         | Supports Inputs |
| ------------------- | --------------------------------------------------- | ------------- | ---------------------------------------- | --------------- |
| `push`              | Runs on `git push` to specified branches/tags       | üöÄ Automatic  | Run CI on every code push                | ‚ùå               |
| `pull_request`      | Runs when a PR is opened, synchronized, or reopened | üöÄ Automatic  | Validate PRs before merging              | ‚ùå               |
| `schedule`          | Runs on a cron schedule (UTC time)                  | üïí Automatic  | Nightly builds, dependency updates       | ‚ùå               |
| `workflow_dispatch` | Runs only when manually triggered via GitHub UI/API | ‚úÖ Manual      | On-demand tests, deployments, patch jobs | ‚úÖ Yes           |
